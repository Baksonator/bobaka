counter <<= 0;
contents <<= 0;
pointer <<= 0;
pointer2 <<= 0;
helper <<= 0;

<-->

plus1 :: Num -> Num
plus1 n = ?
	return n + 1;
?

reset :: Num -> Num
reset n = ?
	return n * 0;
?

oneWord :: String -> String -> Num
oneWord word = ?
	counter = `reset` {counter};
	pointer = `reset` {pointer};
	helper = `split` {contents};
	check pointer != `len` {helper} loop if `toLower` {helper[pointer]} == word fi then counter = `plus1` {counter}; neht else 1; esle pool do pointer = `plus1` {pointer};
	`print` {word, counter};
?

solve :: [String] -> Num
solve file number words = ?
	praveReci = `split` {words};
	contents = `readFile` {file};
	check pointer2 != number loop `oneWord` {praveReci[pointer2]}; pool do pointer2 = `plus1` {pointer2};
?

main :: Num
main = ?
	`solve` {`input` {}, `inputint` {}, `input` {}}
?
