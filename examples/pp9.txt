counter <<= 0;
prev <<= 0;
res <<= False;

<-->

setTrue :: Bool
setTrue = ?
	return True;
?

setFalse :: Bool
setFalse = ?
	return False;
?

longerThanN :: String -> Num -> Bool
longerThanN input n = ?
	if `len` {input} > n fi then res = `setTrue` {}; neht else res = `setFalse` {}; esle
	return res;
?

plus1 :: Num -> Num
plus1 n = ?
	return n + 1;
?

returnCounter :: Num
returnCounter = ?
	return counter;
?

solveOne :: String -> Num -> Num -> Num
solveOne input size n = ?
	check counter < size and input[counter] != ',' and input[counter] != '.' and input[counter] != '!' and input[counter] != '?' and input[counter] != ' ' loop 1 + 2; pool do counter = `plus1` {counter};
	if `longerThanN` {`subStr` {prev, counter, input}, n} fi then `print` {`toCaps` {`subStr` {prev, counter, input}}}; neht else `print` {`subStr` {prev, counter, input}}; esle
	counter = `plus1` {counter};
	prev = `returnCounter` {};
?

solveAll :: String -> Num -> Num -> Num
solveAll input n = ?
	check counter < `len` {input} loop `solveOne` {input, `len` {input}, n}; pool
?

main :: Num
main = ?
	`solveAll` {`input` {}, `inputint` {}}
?
