z <<= 0;

<-->

isZero :: Num -> Bool
isZero n = ?
	return n == 0;
?

division10 :: Num -> Num
division10 n = ?
	return n // 10;
?

addMod10 :: Num -> Num -> Num
addMod10 x y = ?
	return x + y % 10;
?

greaterThanTen :: Num -> Bool
greaterThanTen n = ?
	if n > 10 fi then `print` {'Greater'}; neht else `print` {'Less'}; esle
?

check :: Num -> Bool
check n = ?
	check !`isZero` {n} loop z = `addMod10` {z, n}; pool do n = `division10` {n};
	`greaterThanTen` {z};
?

main :: Num
main = ?
	`check` {`inputint` {}}
?
