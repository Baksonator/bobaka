$libinclude$ math;

z <<= 0;
listOf <<= [];
counter <<= 0;
root <<= 0;
res <<= False;

<-->

readUntil :: [Num]
readUntil = ?
	z = `inputint` {};
	check z > 0 loop `append` {listOf, z}; pool do z = `inputint` {};
?

setTrue :: Bool
setTrue = ?
	return True;
?

setFalse :: Bool
setFalse = ?
	return False;
?

checkNumber :: Num -> Bool
checkNumber n = ?
	root = `round` {`sqrt` {n}};
	if root * root == n fi then res = `setTrue` {}; neht else res = `setFalse` {}; esle
	return res;
?

plus1 :: Num -> Num
plus1 x = ?
	return x + 1;
?

outputNumbers :: Num -> Num
outputNumbers size = ?
    if `checkNumber` {listOf[counter]} fi then `putStr` {listOf[counter]}; neht else 2 + 3; esle
    counter = `plus1` {counter};
	check counter != size loop if `checkNumber` {listOf[counter]} fi then `putStr` {',' + `str` {listOf[counter]}}; neht else 1; esle pool do counter = `plus1` {counter};
?

solve :: Num -> Num
solve = ?
	`readUntil` {};
	`outputNumbers` {`len` {listOf}};
?

main :: Num
main = ?
	`solve` {}
?
