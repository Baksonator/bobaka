counter <<= 0;
c <<= 0;

<-->

reset :: Num -> Num
reset n = ?
	return n * 0;
?

plus2 :: Num -> Num
plus2 n = ?
	return n + 2;
?

plus1 :: Num -> Num
plus1 n = ?
	return n + 1;
?

writeLn :: String -> Num -> Num
writeLn input size = ?
	c = `reset` {c};
	check c != (size - counter) // 2 loop `putStr` {' '}; pool do c = `plus1` {c};
	check c != (size - counter) // 2 + counter loop `putStr` {input[c]}; pool do c = `plus1` {c};
	check c != size loop `putStr` {' '}; pool do c = `plus1` {c};
	`print` {''};
?

outputEven :: String -> Num -> Num
outputEven input size = ?
	counter = `plus2` {counter};
	check counter != size loop `writeLn` {input, size}; pool do counter = `plus2` {counter};
	`print` {input};
?

outputOdd :: String -> Num -> Num
outputOdd input size = ?
	counter = `plus1` {counter};
	check counter != size loop `writeLn` {input, size}; pool do counter = `plus2` {counter};
	`print` {input};
?

output :: String -> Num
output input = ?
	if `len` {input} % 2 == 0 fi then `outputEven` {input, `len` {input}}; neht else `outputOdd` {input, `len` {input}}; esle
?

main :: Num
main = ?
	`output` {`input` {}}
?
